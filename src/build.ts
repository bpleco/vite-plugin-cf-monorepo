import { rmSync, readFileSync, cpSync, writeFileSync } from "fs";
import { join } from "path";
import { PluginConfig } from "./types";

function getFunctionsTsConf(srcDir: string) {
  let tsConf;

  try {
    tsConf = JSON.parse(readFileSync(join(srcDir, "tsconfig.json"), "utf-8"));
  } catch (error) {
    tsConf = {
      compilerOptions: {
        baseUrl: ".",
        paths: {},
      },
    };
  }

  return tsConf;
}

function mutateTsConf(tsConf: any, monorepoPrefix: string) {
  return {
    ...tsConf,
    compilerOptions: {
      ...tsConf.compilerOptions,
      baseUrl: ".",
      paths: {
        [`${monorepoPrefix}/*`]: ["../packages/*/src/index.ts"],
        ...tsConf.compilerOptions?.paths,
      },
    },
  };
}

export function build(config: PluginConfig) {
  const { srcDir, monorepoPrefix } = config;
  const functionsSrcDir = join(srcDir, "functions");

  const functionsDistDir = join(config.workspaceDir, "functions");

  const tsConf = getFunctionsTsConf(functionsSrcDir);

  const mutatedTsConf = mutateTsConf(tsConf, monorepoPrefix);

  console.log(functionsDistDir);

  try {
    rmSync(functionsDistDir, { recursive: true });
  } catch (error) {}

  cpSync(functionsSrcDir, functionsDistDir, { recursive: true });

  writeFileSync(
    join(functionsDistDir, "tsconfig.json"),
    JSON.stringify(mutatedTsConf)
  );

  writeFileSync(
    join(functionsDistDir, "cf-monorepo.README.md"),
    "# This functions directory is auto generated by @bpleco/cf-monorepo-vite-plugin\ndo not edit any of these files"
  );
}
